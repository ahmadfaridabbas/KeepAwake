#!/bin/bash

# Verify Standalone Preferences Window Setup
# This script verifies the preferences window is properly set up as standalone

set -e

PROJECT_DIR="/Users/ahmadfaridabbas/Desktop/KeepAwake"
APP_DIR="$PROJECT_DIR/KeepAwake"

echo "ü™ü Verifying standalone preferences window setup..."

# Check if PreferencesWindowManager exists
WINDOW_MANAGER_FILE="$APP_DIR/Core/PreferencesWindowManager.swift"

if [ -f "$WINDOW_MANAGER_FILE" ]; then
    echo "‚úÖ PreferencesWindowManager.swift exists"
    
    # Check key components
    if grep -q "class PreferencesWindowManager" "$WINDOW_MANAGER_FILE"; then
        echo "   ‚úÖ PreferencesWindowManager class defined"
    else
        echo "   ‚ùå PreferencesWindowManager class missing"
    fi
    
    if grep -q "showPreferences" "$WINDOW_MANAGER_FILE"; then
        echo "   ‚úÖ showPreferences method present"
    else
        echo "   ‚ùå showPreferences method missing"
    fi
    
    if grep -q "NSWindow" "$WINDOW_MANAGER_FILE"; then
        echo "   ‚úÖ Uses NSWindow for standalone window"
    else
        echo "   ‚ùå NSWindow usage missing"
    fi
    
    if grep -q "NSHostingView" "$WINDOW_MANAGER_FILE"; then
        echo "   ‚úÖ Uses NSHostingView for SwiftUI integration"
    else
        echo "   ‚ùå NSHostingView usage missing"
    fi
else
    echo "‚ùå PreferencesWindowManager.swift missing"
fi

# Check if main app uses the window manager
APP_FILE="$APP_DIR/Core/KeepAwakeApp.swift"

echo ""
echo "üîç Checking KeepAwakeApp.swift integration..."

if [ -f "$APP_FILE" ]; then
    if grep -q "PreferencesWindowManager" "$APP_FILE"; then
        echo "‚úÖ PreferencesWindowManager integrated in main app"
    else
        echo "‚ùå PreferencesWindowManager not integrated in main app"
    fi
    
    if grep -q "@StateObject.*preferencesWindowManager" "$APP_FILE"; then
        echo "‚úÖ PreferencesWindowManager StateObject created"
    else
        echo "‚ùå PreferencesWindowManager StateObject missing"
    fi
else
    echo "‚ùå KeepAwakeApp.swift not found"
fi

# Check if GlassyMenuBarView uses the window manager
MENU_BAR_FILE="$APP_DIR/Views/GlassyMenuBarView.swift"

echo ""
echo "üîç Checking GlassyMenuBarView.swift integration..."

if [ -f "$MENU_BAR_FILE" ]; then
    if grep -q "preferencesWindowManager" "$MENU_BAR_FILE"; then
        echo "‚úÖ PreferencesWindowManager parameter added"
    else
        echo "‚ùå PreferencesWindowManager parameter missing"
    fi
    
    if grep -q "showPreferences.*preferences:" "$MENU_BAR_FILE"; then
        echo "‚úÖ showPreferences method called correctly"
    else
        echo "‚ùå showPreferences method call missing or incorrect"
    fi
    
    # Check if old sheet-based approach was removed
    if grep -q "sheet.*showingPreferences" "$MENU_BAR_FILE"; then
        echo "‚ö†Ô∏è  Old sheet-based preferences still present"
    else
        echo "‚úÖ Old sheet-based preferences removed"
    fi
    
    if grep -q "@State.*showingPreferences" "$MENU_BAR_FILE"; then
        echo "‚ö†Ô∏è  Old showingPreferences state still present"
    else
        echo "‚úÖ Old showingPreferences state removed"
    fi
else
    echo "‚ùå GlassyMenuBarView.swift not found"
fi

echo ""
echo "üìã Standalone Preferences Window Benefits:"
echo ""
echo "üéØ **Problem Solved:**"
echo "‚Ä¢ Menu bar no longer closes when recording shortcuts"
echo "‚Ä¢ Preferences window stays open during shortcut recording"
echo "‚Ä¢ Better user experience for keyboard shortcut setup"
echo ""
echo "‚ú® **Technical Improvements:**"
echo "‚Ä¢ Standalone NSWindow instead of sheet"
echo "‚Ä¢ Proper window management and lifecycle"
echo "‚Ä¢ Window remembers position and size"
echo "‚Ä¢ Professional macOS app behavior"
echo ""
echo "ü™ü **Window Features:**"
echo "‚Ä¢ Resizable with minimum size constraints"
echo "‚Ä¢ Proper title bar and window controls"
echo "‚Ä¢ Automatic centering on first show"
echo "‚Ä¢ Frame autosave for position memory"
echo ""

# Overall status check
issues=0

if [ ! -f "$WINDOW_MANAGER_FILE" ]; then
    issues=$((issues + 1))
fi

if ! grep -q "PreferencesWindowManager" "$APP_FILE" 2>/dev/null; then
    issues=$((issues + 1))
fi

if ! grep -q "preferencesWindowManager" "$MENU_BAR_FILE" 2>/dev/null; then
    issues=$((issues + 1))
fi

if [ "$issues" -eq 0 ]; then
    echo "üéâ STANDALONE PREFERENCES WINDOW SETUP COMPLETE!"
    echo ""
    echo "üöÄ **How It Works Now:**"
    echo "1. Click 'Preferences...' in menu bar"
    echo "2. Standalone window opens (menu bar stays open)"
    echo "3. Click on shortcut recorders - they work properly!"
    echo "4. Window stays open during shortcut recording"
    echo "5. Close window when done - menu bar remains functional"
    echo ""
    echo "‚úÖ **Fixed Issues:**"
    echo "‚Ä¢ Menu no longer closes when recording shortcuts"
    echo "‚Ä¢ Keyboard shortcut recorders work properly"
    echo "‚Ä¢ Professional window management"
    echo "‚Ä¢ Better user experience"
    echo ""
    echo "üé® **User Experience:**"
    echo "‚Ä¢ Click shortcut recorder ‚Üí record shortcut ‚Üí continue using preferences"
    echo "‚Ä¢ No more menu closing interruptions"
    echo "‚Ä¢ Smooth, professional interaction"
else
    echo "‚ö†Ô∏è  Found $issues integration issues - check details above"
fi

echo ""
echo "üîß **Next Steps:**"
echo "1. Build your app in Xcode"
echo "2. Test the Preferences button"
echo "3. Try recording keyboard shortcuts"
echo "4. Verify the menu bar stays open"
